# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      deployments: read
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Setup
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install dependencies
        run: npm ci
        working-directory: infra
      - name: Build frontend
        env:
          CI: "true"
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: npm install && npx projen build && npx projen export
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}
      - name: Bootstrap
        env:
          CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
          CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: cd infra && npx cdk bootstrap aws://$CDK_DEFAULT_ACCOUNT/$CDK_DEFAULT_REGION aws://$CDK_DEFAULT_ACCOUNT/us-east-1
      - name: Deploy Certificate
        env:
          CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
          CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: cd infra && npx cdk synth certificate && npx cdk deploy certificate
      - name: Deploy Resume
        env:
          CI: "true"
          CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
          CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: npx cdk synth resume && npx cdk deploy resume --require-approval never
        working-directory: infra
